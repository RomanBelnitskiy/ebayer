/*
 * Browse API
 * <p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, image </b><a href=\"/api-docs/static/versioning.html#experimental \" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Method\" title=\"Experimental Method\" />(Experimental Method)</a>, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  </ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>.</p>
 *
 * OpenAPI spec version: v1.19.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.ebuyer.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
 */
@Schema(description = "This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-01-25T17:50:03.851347329Z[GMT]")

public class Refinement {
  @SerializedName("aspectDistributions")
  private List<AspectDistribution> aspectDistributions = null;

  @SerializedName("buyingOptionDistributions")
  private List<BuyingOptionDistribution> buyingOptionDistributions = null;

  @SerializedName("categoryDistributions")
  private List<CategoryDistribution> categoryDistributions = null;

  @SerializedName("conditionDistributions")
  private List<ConditionDistribution> conditionDistributions = null;

  @SerializedName("dominantCategoryId")
  private String dominantCategoryId = null;

  public Refinement aspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
    return this;
  }

  public Refinement addAspectDistributionsItem(AspectDistribution aspectDistributionsItem) {
    if (this.aspectDistributions == null) {
      this.aspectDistributions = new ArrayList<AspectDistribution>();
    }
    this.aspectDistributions.add(aspectDistributionsItem);
    return this;
  }

   /**
   * An array of containers for the all the aspect refinements.
   * @return aspectDistributions
  **/
  @Schema(description = "An array of containers for the all the aspect refinements.")
  public List<AspectDistribution> getAspectDistributions() {
    return aspectDistributions;
  }

  public void setAspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
  }

  public Refinement buyingOptionDistributions(List<BuyingOptionDistribution> buyingOptionDistributions) {
    this.buyingOptionDistributions = buyingOptionDistributions;
    return this;
  }

  public Refinement addBuyingOptionDistributionsItem(BuyingOptionDistribution buyingOptionDistributionsItem) {
    if (this.buyingOptionDistributions == null) {
      this.buyingOptionDistributions = new ArrayList<BuyingOptionDistribution>();
    }
    this.buyingOptionDistributions.add(buyingOptionDistributionsItem);
    return this;
  }

   /**
   * An array of containers for the all the buying option refinements.
   * @return buyingOptionDistributions
  **/
  @Schema(description = "An array of containers for the all the buying option refinements.")
  public List<BuyingOptionDistribution> getBuyingOptionDistributions() {
    return buyingOptionDistributions;
  }

  public void setBuyingOptionDistributions(List<BuyingOptionDistribution> buyingOptionDistributions) {
    this.buyingOptionDistributions = buyingOptionDistributions;
  }

  public Refinement categoryDistributions(List<CategoryDistribution> categoryDistributions) {
    this.categoryDistributions = categoryDistributions;
    return this;
  }

  public Refinement addCategoryDistributionsItem(CategoryDistribution categoryDistributionsItem) {
    if (this.categoryDistributions == null) {
      this.categoryDistributions = new ArrayList<CategoryDistribution>();
    }
    this.categoryDistributions.add(categoryDistributionsItem);
    return this;
  }

   /**
   * An array of containers for the all the category refinements.
   * @return categoryDistributions
  **/
  @Schema(description = "An array of containers for the all the category refinements.")
  public List<CategoryDistribution> getCategoryDistributions() {
    return categoryDistributions;
  }

  public void setCategoryDistributions(List<CategoryDistribution> categoryDistributions) {
    this.categoryDistributions = categoryDistributions;
  }

  public Refinement conditionDistributions(List<ConditionDistribution> conditionDistributions) {
    this.conditionDistributions = conditionDistributions;
    return this;
  }

  public Refinement addConditionDistributionsItem(ConditionDistribution conditionDistributionsItem) {
    if (this.conditionDistributions == null) {
      this.conditionDistributions = new ArrayList<ConditionDistribution>();
    }
    this.conditionDistributions.add(conditionDistributionsItem);
    return this;
  }

   /**
   * An array of containers for the all the condition refinements.
   * @return conditionDistributions
  **/
  @Schema(description = "An array of containers for the all the condition refinements.")
  public List<ConditionDistribution> getConditionDistributions() {
    return conditionDistributions;
  }

  public void setConditionDistributions(List<ConditionDistribution> conditionDistributions) {
    this.conditionDistributions = conditionDistributions;
  }

  public Refinement dominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
    return this;
  }

   /**
   * The identifier of the category that most of the items are part of. 
   * @return dominantCategoryId
  **/
  @Schema(description = "The identifier of the category that most of the items are part of. ")
  public String getDominantCategoryId() {
    return dominantCategoryId;
  }

  public void setDominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refinement refinement = (Refinement) o;
    return Objects.equals(this.aspectDistributions, refinement.aspectDistributions) &&
        Objects.equals(this.buyingOptionDistributions, refinement.buyingOptionDistributions) &&
        Objects.equals(this.categoryDistributions, refinement.categoryDistributions) &&
        Objects.equals(this.conditionDistributions, refinement.conditionDistributions) &&
        Objects.equals(this.dominantCategoryId, refinement.dominantCategoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectDistributions, buyingOptionDistributions, categoryDistributions, conditionDistributions, dominantCategoryId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refinement {\n");
    
    sb.append("    aspectDistributions: ").append(toIndentedString(aspectDistributions)).append("\n");
    sb.append("    buyingOptionDistributions: ").append(toIndentedString(buyingOptionDistributions)).append("\n");
    sb.append("    categoryDistributions: ").append(toIndentedString(categoryDistributions)).append("\n");
    sb.append("    conditionDistributions: ").append(toIndentedString(conditionDistributions)).append("\n");
    sb.append("    dominantCategoryId: ").append(toIndentedString(dominantCategoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
